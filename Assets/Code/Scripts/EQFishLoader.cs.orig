using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class EQFishLoader : MonoBehaviour
{
    // The GameObject to instantiate.
    public GameObject entityToSpawn;

    // Content container in which GameObjects are spawned
    public Transform contentTransform;

    // An instance of the ScriptableObject defined above.
    public List<FishData> fishDataValues;

    // The Equipment View UI object
    public GameObject equipmentView;

    // A Map to store the current equipment data
    private Dictionary<NewFishData, int[]> fishDataDictionary;

    void Start()
    {
        //SpawnEntities();
        fishDataDictionary = new Dictionary<NewFishData, int[]>();
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.E))
        {
            Debug.Log("Equipment button activated");
            if (equipmentView != null)
            {
                Debug.Log("Equipment object found");
                if(equipmentView.activeSelf)
                {
                    DestroyEntities();
                    equipmentView.SetActive(false);
                }
                else
                {
                    SpawnEntities();
                    equipmentView.SetActive(true);
                }
            }
            else
            {
                Debug.Log("Equipment object not found");
            }
        }
    }

<<<<<<< HEAD
    //public void addFishEntity(Dictionary<NewFishData, int[]> caughtFishes)
    //{
    //    //Debug.Log("Adding caught fish data");
    //    foreach (NewFishData newFishData in caughtFishes.Keys)
    //    {
    //        if (fishDataDictionary.ContainsKey(newFishData))
    //        {
    //            Debug.Log("Adding numbers...." + "\n" + fishDataDictionary[newFishData] + "\n" + caughtFishes[newFishData]);
    //            fishDataDictionary[newFishData][0] += caughtFishes[newFishData][0];
    //            fishDataDictionary[newFishData][1] += caughtFishes[newFishData][1];
    //            fishDataDictionary[newFishData][2] += caughtFishes[newFishData][2];
    //        } else
    //        {
    //            fishDataDictionary.Add(newFishData, caughtFishes[newFishData]);
    //        }
    //    }
    //}
=======
    public void addFishEntity(Dictionary<NewFishData, int[]> caughtFishes)
    {
        Debug.Log("Adding caught fish data");
        foreach (NewFishData newFishData in caughtFishes.Keys)
        {
            if (fishDataDictionary.ContainsKey(newFishData))
            {
                Debug.Log("Adding numbers...." + "\n" + fishDataDictionary[newFishData] + "\n" + caughtFishes[newFishData]);
                fishDataDictionary[newFishData][0] = caughtFishes[newFishData][0];
                fishDataDictionary[newFishData][1] = caughtFishes[newFishData][1];
                fishDataDictionary[newFishData][2] = caughtFishes[newFishData][2];
            } else
            {
                fishDataDictionary.Add(newFishData, caughtFishes[newFishData]);
            }
        }
    }
>>>>>>> 8c89ead673b6ebdb73f6455818d6c76e9f331475


    void DestroyEntities()
    {
        Debug.Log("Destroying Equipment entities");
        for (int i = 0; i < contentTransform.childCount; i++)
        {
            Debug.Log("Destroying Equipment entities");
            Destroy(contentTransform.GetChild(i).gameObject);
        }
    }

    void SpawnEntities()
    {

<<<<<<< HEAD
        foreach (var f in GetComponent<EquipementScript>().fishDataDictionary)
=======
        Dictionary<NewFishData, int[]> fish_data = GetComponent<EquipementScript>().fishDataDictionary;

        foreach (NewFishData f in fish_data.Keys)
>>>>>>> 8c89ead673b6ebdb73f6455818d6c76e9f331475
        {
            Debug.Log("Instantiating equipment entities");
            GameObject inst = Instantiate(entityToSpawn, contentTransform.transform);


            Image[] fishImages = inst.GetComponentsInChildren<Image>();

            fishImages[1].sprite = f.Key.image;

            TMP_Text[] textFields = inst.GetComponentsInChildren<TMP_Text>();

<<<<<<< HEAD
            textFields[0].SetText(f.Key.name);
            textFields[1].SetText(f.Key.description);
            textFields[5].SetText(f.Value[2].ToString());
            textFields[6].SetText(f.Value[1].ToString());
            textFields[7].SetText(f.Value[0].ToString());
            textFields[8].SetText(f.Key.price.ToString("C", new CultureInfo("en-US")));
=======
            textFields[0].SetText(f.name);
            textFields[1].SetText(f.description);
            textFields[5].SetText(fish_data[f][2].ToString());
            textFields[6].SetText(fish_data[f][1].ToString());
            textFields[7].SetText(fish_data[f][0].ToString());
            textFields[8].SetText(f.price.ToString("C", new CultureInfo("en-US")));
>>>>>>> 8c89ead673b6ebdb73f6455818d6c76e9f331475

        }
    }
}
